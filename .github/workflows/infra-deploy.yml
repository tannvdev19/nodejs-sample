name: Infrastruture create

on:
  workflow_dispatch:
    inputs:
      choice-branch:
        type: choice
        description: "Choose the environment to deploy ecr"
        default: "dev"
        options:
          - "dev"
          - "prod"

permissions: write-all
env:
  PLAN_FILE: tf-plan
  PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  infra-plan:
    name: Create AWS ECR with Terraform
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.choice-branch }}
    env:
      environment: ${{ github.event.inputs.choice-branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: infra
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}
          mask-aws-account-id: "no"
      - name: Get private key
        working-directory: ./env-${{env.environment}}
        run: |
          echo "${{ env.PRIVATE_KEY }}" > private_key
          chmod 400 private_key
      - name: Terraform init
        working-directory: ./env-${{env.environment}}
        run: terraform init
      - name: Terraform plan
        working-directory: ./env-${{env.environment}}
        run: terraform plan | tee ${{env.PLAN_FILE}}
      - name: Check for skip apply
        id: verify-apply
        working-directory: ./env-${{env.environment}}
        run: |
          if grep -q "No changes" ${{env.PLAN_FILE}};then
            echo "SKIP_APPLY=true" >> $GITHUB_OUTPUT
          else
            echo "SKIP_APPLY=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload plan
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.PLAN_FILE}}
          path: ./env-${{env.environment}}/${{env.PLAN_FILE}}
      - name: Print output
        run: echo "Print SKIP_APPLY=${{ steps.verify-apply.outputs.SKIP_APPLY }}"
    outputs:
      SKIP_APPLY: ${{ steps.verify-apply.outputs.SKIP_APPLY }}
  infra-apply:
    name: Infra apply
    runs-on: ubuntu-latest
    needs: infra-plan
    if: needs.infra-plan.outputs.SKIP_APPLY=='false'
    environment: ${{ github.event.inputs.choice-branch }}
    env:
      environment: ${{ github.event.inputs.choice-branch }}
      PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
    steps:
      - name: Print apply
        run: echo "Print SKIP_APPLY=${{ needs.infra-plan.outputs.SKIP_APPLY }}"
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: infra
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}
          mask-aws-account-id: "no"
      - name: Get private key
        working-directory: ./env-${{env.environment}}
        run: |
          echo "${{ env.PRIVATE_KEY }}" > private_key
          chmod 400 private_key
      - name: Terraform init
        working-directory: ./env-${{env.environment}}
        run: terraform init
      - name: Download plan file
        uses: actions/download-artifact@v3
        with:
          name: ${{env.PLAN_FILE}}
          path: ./env-${{env.environment}}/${{env.PLAN_FILE}}
      - name: Terraform apply
        working-directory: ./env-${{env.environment}}
        run: terraform apply -auto-approve
      - name: Setup output
        id: tf-output
        working-directory: ./env-${{env.environment}}
        run: |
          echo "ECR_REPO_URL=$(terraform output ecr_repo_url)" >> $GITHUB_OUTPUT
          echo "EC2_PUBLIC_IP=$(terraform output ec2_public_ip)" >> $GITHUB_OUTPUT
          echo "EC2_PUBLIC_DNS=$(terraform output ec2_public_dns)" >> $GITHUB_OUTPUT
    outputs:
      ECR_REPO_URL: ${{ steps.tf-output.outputs.ECR_REPO_URL }}
      EC2_PUBLIC_IP: ${{ steps.tf-output.outputs.EC2_PUBLIC_IP }}
      EC2_PUBLIC_DNS: ${{ steps.tf-output.outputs.EC2_PUBLIC_DNS }}
  update_variables:
    name: Update Github Variables
    runs-on: ubuntu-latest
    needs: infra-apply
    environment: ${{ github.event.inputs.choice-branch }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      ENVIRONMENT: ${{ github.event.inputs.choice-branch }}
      REPO_URL: ${{ needs.infra-apply.outputs.ECR_REPO_URL }}
      EC2_PUBLIC_IP: ${{ needs.infra-apply.outputs.EC2_PUBLIC_IP }}
      EC2_PUBLIC_DNS: ${{ needs.infra-apply.outputs.EC2_PUBLIC_DNS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: prod
      - name: Update Github Variables
        run: |
          echo "url: ${{ env.REPO_URL }}" 
          bash ./bash-script/update-vars.sh -e ${{env.ENVIRONMENT}} -u ${{ env.REPO_URL }}
          gh variable set EC2_PUBLIC_IP -b ${{ env.EC2_PUBLIC_IP }} -e ${{env.ENVIRONMENT}}
          gh variable set EC2_PUBLIC_DNS -b ${{ env.EC2_PUBLIC_DNS }} -e ${{env.ENVIRONMENT}}
