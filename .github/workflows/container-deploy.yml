name: Push ECR and deploy container EC2

on:
  # push:
  #   branches: ["prod"]
  # pull_request:
  #   branches: ["prod"]
  workflow_dispatch:
    inputs:
      confirm-create-tag:
        type: choice
        description: "Do you want to create tag and push (no or yes)?"
        default: "no"
        options: ["yes", "no"]
      choose-branch:
        type: choice
        description: "Choose branch you want to create tag"
        default: "prod"
        options: ["prod", "dev"]
      update-version-type:
        description: "Do you want to create new tags for major, minor or patch?"
        type: choice
        options: ["patch", "minor", "major"]
        default: patch

permissions: write-all

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    # environment: ${{ github.ref_name }}
    environment: ${{ github.event.inputs.choose-branch}}
    if: github.event.inputs.confirm-create-tag == 'yes'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Build the Docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/${{ vars.PROJECT_NAME }} .

  create_version:
    name: Create tag base of previous tag
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./bash-script/create_new_tag.sh -v ${{github.event.inputs.update-version-type}} -e ${{ github.event.inputs.choose-branch}}
    outputs:
      NEW_TAG: ${{ steps.increment-git-tag.outputs.NEW_TAG }}
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    # environment: ${{ github.ref_name }}
    environment: ${{ github.event.inputs.choose-branch}}
    needs: create_version
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: tannvdev19/sample-nodejs

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ needs.create_version.outputs.NEW_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

  push_to_ecr:
    name: Push docker image to ECR
    runs-on: ubuntu-latest
    # environment: ${{ github.ref_name }}
    environment: ${{ github.event.inputs.choose-branch}}
    needs: create_version
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ needs.create_version.outputs.NEW_TAG}}
        run: |
          echo "Image tag: ${{ vars.ECR_REPO_URL }}:$IMAGE_TAG"
          docker build --tag ${{ vars.ECR_REPO_URL }}:$IMAGE_TAG .
          docker push ${{ vars.ECR_REPO_URL }}:$IMAGE_TAG

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Image tag: ${{ vars.ECR_REPO_URL }}:$IMAGE_TAG"
          docker build --tag ${{ vars.ECR_REPO_URL }}:$IMAGE_TAG .
          docker push ${{ vars.ECR_REPO_URL }}:$IMAGE_TAG

  deploy_ec2:
    name: Deploy container to EC2
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.choose-branch}}
    needs: push_to_ecr
    env:
      PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: infra
      - name: SSH into EC2 instance and deploy app
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 400 private_key
          scp -o StrictHostKeyChecking=no -i private_key docker-compose.yaml ec2-user@${{vars.EC2_PUBLIC_IP}}:/home/ec2-user/docker-compose.yaml
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@${{vars.EC2_PUBLIC_IP}} "aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY}} | docker-compose up -d"
        # aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY}}
        # docker-compose up -d
